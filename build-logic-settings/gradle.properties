# Has common auto generated part!
# Modify it at: `conf/common.gradle.properties`
# then use :generateCommonProperties task

# from common properties
kotlin.code.style=official
# from common properties
# JVM arguments considerations:
# GC:
# - Use default GC for Java 11 - G1
# It showed almost the same results in comparison to ParallelGC,
# but can shrink unused memory and return it to the OS.
# Xmx:
# - Is the same as in avito internal repository to reuse Gradle daemon

# TODO: Use Gradle doctor to detect GC issues MBS-12451
# because UseGCOverheadLimit and GCTimeLimit is not supported yet in G1 https://bugs.openjdk.java.net/browse/JDK-8212084
org.gradle.jvmargs=-Xmx9g -Dfile.encoding=UTF-8
# from common properties
org.gradle.unsafe.configuration-cache=false
# from common properties
# - https://youtrack.jetbrains.com/issue/KT-43605
# should be ok to use it because properties are `java.rmi.server.hostname` and `kotlin.environment.keepalive`
# which should not change on local machine
org.gradle.unsafe.configuration-cache-problems=warn
# from common properties
org.gradle.parallel=true
# from common properties
org.gradle.caching=true
# from common properties
# https://github.com/gradle/gradle/issues/4823
org.gradle.configureondemand=false
# from common properties
# Limited locally, because unlimited workers will hang pc on parallel gradleTest execution
org.gradle.workers.max=4
# from common properties
# to make MergeResources tasks relocatable https://issuetracker.google.com/issues/141301405
android.experimental.enableSourceSetPathsMap=true
# from common properties
# to make CompileLibraryResourcesTask tasks relocatable https://issuetracker.google.com/issues/141301405
android.experimental.cacheCompileLibResources=true
# from common properties
org.gradle.vfs.watch=true
# from common properties
# To enable fail-fast checks for type-safe accessors.
# To make GeneratePrecompiledScriptPluginAccessors cacheable.
systemProp.org.gradle.kotlin.dsl.precompiled.accessors.strict=true
